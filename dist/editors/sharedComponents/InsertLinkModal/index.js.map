{"version":3,"file":"index.js","names":["_react","require","_reactRedux","_propTypes","_interopRequireDefault","_logging","_i18n","_paragon","_insertlink","_BaseModal","_BlocksList","_BlockLink","_SearchBlocks","_utils","_api","_messages","_jsxRuntime","obj","__esModule","default","InsertLinkModal","_ref","courseId","isOpen","onClose","editorRef","intl","useIntl","searchField","setSearchField","useState","blocksSearched","setBlocksSearched","blockSelected","setBlocksSelected","blocksList","setBlocksList","setInvalidUrlInput","inputUrlValue","setInputUrlValue","dispatch","useDispatch","selectedBlocks","useSelector","selectors","insertlinkState","handleSearchedBlocks","isSearched","handleSelectedBlock","blockSelectedFromList","handleCloseLink","handleSave","editor","current","urlPath","lmsWebUrl","blockId","linkRegex","validateUrl","isValidURL","selectedRange","selection","getRng","selectedNode","getNode","textContent","getContent","format","selectedText","newLinkNode","dom","create","href","target","deleteContents","insertNode","appendChild","editorContent","modifiedContent","replace","setContent","actions","addBlock","nodeName","remove","links","querySelectorAll","forEach","link","useEffect","getBlocksList","blocksData","getBlocksFromCourse","blocks","blocksResponse","root","rootBlocksResponse","blockListFormatted","formatBlocks","error","logError","selectionNode","selectedHTML","outerHTML","regexDataBlockId","regexHref","matchDataBlockId","match","matchHreUrl","dataBlockId","hrefUrl","blockSelectedUrl","hasExternalUrl","parentNode","getParent","dataBlockIdParent","getAttribute","url","blockIsValid","blockIdFormat","hasValidUrl","jsx","close","title","formatMessage","messages","insertLinkModalTitle","confirmAction","Button","variant","onClick","children","insertLinkModalButtonSave","path","onCloseLink","Tabs","defaultActiveKey","id","className","jsxs","Tab","eventKey","insertLinkModalCoursePagesTabTitle","onSearchFilter","searchInputValue","onBlockSelected","propTypes","PropTypes","string","isRequired","bool","func","shape","_default","exports"],"sources":["../../../../src/editors/sharedComponents/InsertLinkModal/index.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { logError } from '@edx/frontend-platform/logging';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Button,\n  Tabs,\n  Tab,\n} from '@openedx/paragon';\nimport { actions, selectors } from '../../data/redux/insertlink';\nimport BaseModal from '../BaseModal';\nimport BlocksList from './BlocksList';\nimport BlockLink from './BlockLink';\nimport SearchBlocks from './SearchBlocks';\nimport { formatBlocks, isValidURL } from './utils';\nimport { getBlocksFromCourse } from './api';\n\nimport messages from './messages';\nimport './index.scss';\n\nconst InsertLinkModal = ({\n  courseId,\n  isOpen,\n  onClose,\n  editorRef,\n}) => {\n  const intl = useIntl();\n  const [searchField, setSearchField] = useState('');\n  const [blocksSearched, setBlocksSearched] = useState(false);\n  const [blockSelected, setBlocksSelected] = useState(null);\n  const [blocksList, setBlocksList] = useState(null);\n  const [, setInvalidUrlInput] = useState(false);\n  const [inputUrlValue, setInputUrlValue] = useState('');\n  const dispatch = useDispatch();\n  const { selectedBlocks } = useSelector(selectors.insertlinkState);\n\n  const handleSearchedBlocks = (isSearched) => {\n    setBlocksSearched(isSearched);\n  };\n\n  const handleSelectedBlock = (blockSelectedFromList) => {\n    setBlocksSelected(blockSelectedFromList);\n    setInputUrlValue('');\n  };\n\n  const handleCloseLink = () => {\n    setSearchField('');\n    setBlocksSelected(null);\n  };\n\n  /* istanbul ignore next */\n  const handleSave = () => {\n    const editor = editorRef.current;\n    const urlPath = blockSelected?.lmsWebUrl || inputUrlValue;\n    const blockId = blockSelected?.blockId;\n    const linkRegex = /<a\\b[^>]*><\\/a>/gi;\n    if (editor && urlPath) {\n      const validateUrl = isValidURL(urlPath);\n\n      if (!validateUrl) {\n        setInvalidUrlInput(true);\n        return;\n      }\n\n      const selectedRange = editor.selection.getRng();\n      const selectedNode = editor.selection.getNode();\n      const textContent = editor.selection.getContent({ format: 'text' });\n      const selectedText = textContent || selectedNode.textContent;\n\n      const newLinkNode = editor.dom.create('a', {\n        href: urlPath,\n        'data-mce-href': urlPath,\n        'data-block-id': blockId,\n        target: '_blank',\n      });\n\n      if (textContent) {\n        // If the selected node is a text node, replace the selection with the new link\n        newLinkNode.textContent = selectedText;\n\n        selectedRange.deleteContents();\n        selectedRange.insertNode(newLinkNode);\n      } else {\n        // If the selected node is an element node, wrap its text content in the new link\n        newLinkNode.textContent = selectedNode.textContent;\n        selectedNode.textContent = '';\n        selectedNode.appendChild(newLinkNode);\n      }\n\n      // Remove empty \"a\" tags after replacing URLs (if needed)\n      const editorContent = editor.getContent();\n      const modifiedContent = editorContent.replace(linkRegex, '');\n      editor.setContent(modifiedContent);\n\n      dispatch(actions.addBlock({ [blockId]: blockSelected }));\n    }\n\n    if (editor && !blockId) {\n      const selectedNode = editor.selection.getNode();\n\n      if (selectedNode.nodeName === 'A') {\n        // If the selected node is a link, unwrap it\n        editor.dom.remove(selectedNode, true);\n      } else {\n        // If the selected node contains links, remove them\n        const links = selectedNode.querySelectorAll('a');\n        links.forEach(link => editor.dom.remove(link, true));\n      }\n      // Update the editor content\n      editor.setContent(editor.getContent());\n    }\n\n    onClose();\n  };\n\n  useEffect(() => {\n    const getBlocksList = async () => {\n      try {\n        const blocksData = await getBlocksFromCourse(courseId);\n        const { blocks: blocksResponse, root: rootBlocksResponse } = blocksData;\n        const blockListFormatted = formatBlocks(\n          blocksResponse,\n          rootBlocksResponse,\n        );\n        setBlocksList(blockListFormatted);\n      } catch (error) {\n        logError(error);\n      }\n    };\n\n    getBlocksList();\n  }, []);\n\n  useEffect(() => {\n    /* istanbul ignore next */\n    const editor = editorRef.current;\n    if (editor) {\n      const selectionNode = editor.selection.getNode();\n      const selectedHTML = editor.selection.getContent({ format: 'html' }) || selectionNode.outerHTML;\n      const regexDataBlockId = /data-block-id=\"([^\"]+)\"/;\n      const regexHref = /href=\"([^\"]+)\"/;\n      const matchDataBlockId = selectedHTML.match(regexDataBlockId);\n      const matchHreUrl = selectedHTML.match(regexHref);\n\n      // Extracting the value from the match\n      const dataBlockId = matchDataBlockId ? matchDataBlockId[1] : null;\n      const hrefUrl = matchHreUrl ? matchHreUrl[1] : null;\n      const blockSelectedUrl = selectedBlocks?.[dataBlockId]?.lmsWebUrl;\n      const hasExternalUrl = hrefUrl !== blockSelectedUrl;\n\n      if (selectedHTML && !dataBlockId) {\n        const selectedNode = editor.selection.getNode();\n        const parentNode = editor.dom.getParent(selectedNode, 'a');\n        if (parentNode) {\n          const dataBlockIdParent = parentNode.getAttribute('data-block-id');\n          const url = parentNode.getAttribute('href');\n          const blockIsValid = dataBlockIdParent in selectedBlocks;\n          const blockIdFormat = blockSelectedUrl ?? selectedBlocks?.[dataBlockIdParent]?.lmsWebUrl;\n          const hasValidUrl = url === blockIdFormat;\n          if (dataBlockIdParent && blockIsValid && hasValidUrl) {\n            setBlocksSelected(selectedBlocks[dataBlockIdParent]);\n          } else {\n            setBlocksSelected(null);\n          }\n        }\n      }\n\n      if (dataBlockId && hasExternalUrl) {\n        setBlocksSelected(null);\n      }\n\n      if (dataBlockId && !hasExternalUrl) {\n        const blockIsValid = dataBlockId in selectedBlocks;\n        if (dataBlockId && blockIsValid) {\n          setBlocksSelected(selectedBlocks[dataBlockId]);\n        }\n      }\n    }\n  }, []);\n\n  return (\n    <BaseModal\n      isOpen={isOpen}\n      close={onClose}\n      title={intl.formatMessage(messages.insertLinkModalTitle)}\n      confirmAction={(\n        <Button variant=\"primary\" onClick={handleSave}>\n          {intl.formatMessage(messages.insertLinkModalButtonSave)}\n        </Button>\n      )}\n    >\n      {blockSelected ? (\n        <BlockLink path={blockSelected.path} onCloseLink={handleCloseLink} />\n      ) : (\n        <Tabs\n          variant=\"tabs\"\n          defaultActiveKey=\"course-pages\"\n          id=\"uncontrolled-tab-example\"\n          className=\"mt-3 justify-content-around w-100\"\n        >\n          <Tab\n            eventKey=\"course-pages\"\n            title={intl.formatMessage(messages.insertLinkModalCoursePagesTabTitle)}\n            className=\"col-12 w-100 tabs-container\"\n          >\n\n            <SearchBlocks\n              blocks={blocksList || {}}\n              onSearchFilter={handleSearchedBlocks}\n              searchInputValue={searchField}\n              onBlockSelected={handleSelectedBlock}\n            />\n            {!blocksSearched && (\n              <BlocksList\n                blocks={blocksList || {}}\n                onBlockSelected={handleSelectedBlock}\n              />\n            )}\n          </Tab>\n        </Tabs>\n      )}\n    </BaseModal>\n  );\n};\n\nInsertLinkModal.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  editorRef: PropTypes.shape({\n    current: PropTypes.shape({\n      selection: PropTypes.shape({\n        getContent: PropTypes.func,\n        setContent: PropTypes.func,\n        getRng: PropTypes.func,\n        getNode: PropTypes.func,\n      }),\n      getContent: PropTypes.func,\n      setContent: PropTypes.func,\n      dom: PropTypes.shape({\n        create: PropTypes.func,\n        getParent: PropTypes.func,\n        remove: PropTypes.func,\n      }),\n    }),\n  }).isRequired,\n};\n\nexport default InsertLinkModal;\n"],"mappings":"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"}