{"version":3,"file":"utils.test.js","names":["_utils","require","describe","testBlocks","block1","id","path","block2","block3","test","searchText","filteredBlocks","filterBlocksByText","expect","toEqual"],"sources":["../../../../../src/editors/sharedComponents/InsertLinkModal/SearchBlocks/utils.test.js"],"sourcesContent":["import { filterBlocksByText } from './utils';\n\ndescribe('SearchBlocks utils', () => {\n  describe('filterBlocksByText function', () => {\n    const testBlocks = {\n      block1: {\n        id: 'block1',\n        path: 'Root / Child 1',\n      },\n      block2: {\n        id: 'block2',\n        path: 'Root / Child 2',\n      },\n      block3: {\n        id: 'block3',\n        path: 'Another / Block',\n      },\n    };\n\n    test('returns an empty object when searchText is empty', () => {\n      const searchText = '';\n      const filteredBlocks = filterBlocksByText(searchText, testBlocks);\n      expect(filteredBlocks).toEqual({});\n    });\n\n    test('filters blocks based on case-insensitive searchText', () => {\n      const searchText = 'child';\n      const filteredBlocks = filterBlocksByText(searchText, testBlocks);\n      expect(filteredBlocks).toEqual({\n        block1: {\n          id: 'block1',\n          path: 'Root / Child 1',\n        },\n        block2: {\n          id: 'block2',\n          path: 'Root / Child 2',\n        },\n      });\n    });\n\n    test('returns an empty object when no blocks match searchText', () => {\n      const searchText = 'nonexistent';\n      const filteredBlocks = filterBlocksByText(searchText, testBlocks);\n      expect(filteredBlocks).toEqual({});\n    });\n\n    test('filters blocks with partial matches in path', () => {\n      const searchText = 'root';\n      const filteredBlocks = filterBlocksByText(searchText, testBlocks);\n      expect(filteredBlocks).toEqual({\n        block1: {\n          id: 'block1',\n          path: 'Root / Child 1',\n        },\n        block2: {\n          id: 'block2',\n          path: 'Root / Child 2',\n        },\n      });\n    });\n  });\n});\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEAC,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnCA,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5C,MAAMC,UAAU,GAAG;MACjBC,MAAM,EAAE;QACNC,EAAE,EAAE,QAAQ;QACZC,IAAI,EAAE;MACR,CAAC;MACDC,MAAM,EAAE;QACNF,EAAE,EAAE,QAAQ;QACZC,IAAI,EAAE;MACR,CAAC;MACDE,MAAM,EAAE;QACNH,EAAE,EAAE,QAAQ;QACZC,IAAI,EAAE;MACR;IACF,CAAC;IAEDG,IAAI,CAAC,kDAAkD,EAAE,MAAM;MAC7D,MAAMC,UAAU,GAAG,EAAE;MACrB,MAAMC,cAAc,GAAG,IAAAC,yBAAkB,EAACF,UAAU,EAAEP,UAAU,CAAC;MACjEU,MAAM,CAACF,cAAc,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEFL,IAAI,CAAC,qDAAqD,EAAE,MAAM;MAChE,MAAMC,UAAU,GAAG,OAAO;MAC1B,MAAMC,cAAc,GAAG,IAAAC,yBAAkB,EAACF,UAAU,EAAEP,UAAU,CAAC;MACjEU,MAAM,CAACF,cAAc,CAAC,CAACG,OAAO,CAAC;QAC7BV,MAAM,EAAE;UACNC,EAAE,EAAE,QAAQ;UACZC,IAAI,EAAE;QACR,CAAC;QACDC,MAAM,EAAE;UACNF,EAAE,EAAE,QAAQ;UACZC,IAAI,EAAE;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFG,IAAI,CAAC,yDAAyD,EAAE,MAAM;MACpE,MAAMC,UAAU,GAAG,aAAa;MAChC,MAAMC,cAAc,GAAG,IAAAC,yBAAkB,EAACF,UAAU,EAAEP,UAAU,CAAC;MACjEU,MAAM,CAACF,cAAc,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEFL,IAAI,CAAC,6CAA6C,EAAE,MAAM;MACxD,MAAMC,UAAU,GAAG,MAAM;MACzB,MAAMC,cAAc,GAAG,IAAAC,yBAAkB,EAACF,UAAU,EAAEP,UAAU,CAAC;MACjEU,MAAM,CAACF,cAAc,CAAC,CAACG,OAAO,CAAC;QAC7BV,MAAM,EAAE;UACNC,EAAE,EAAE,QAAQ;UACZC,IAAI,EAAE;QACR,CAAC;QACDC,MAAM,EAAE;UACNF,EAAE,EAAE,QAAQ;UACZC,IAAI,EAAE;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}