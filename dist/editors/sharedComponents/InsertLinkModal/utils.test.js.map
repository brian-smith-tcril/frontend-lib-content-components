{"version":3,"file":"utils.test.js","names":["_utils","require","describe","testBlocks","id","blockId","lmsWebUrl","legacyWebUrl","studentViewUrl","type","displayName","children","test","testBlock","addPathToBlocks","expect","path","toBe","parentId","rootBlockId","parentBlock","nestedBlock1","nestedBlock2","mockBlocks","blockRoot","block1","block2","formattedBlocks","formatBlocks","toBeDefined","toEqual","toBeNull","validHTTPUrl","isValidURL","validHTTPSUrl","validFTPUrl","invalidUrl","emptyUrl","urlWithSpaces"],"sources":["../../../../src/editors/sharedComponents/InsertLinkModal/utils.test.js"],"sourcesContent":["import {\n  addPathToBlocks,\n  formatBlocks,\n  isValidURL,\n} from './utils';\n\ndescribe('utils', () => {\n  describe('addPathToBlocks function', () => {\n    const testBlocks = {\n      'block-key': {\n        id: 'block-key',\n        blockId: 'edx_block-1',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        type: 'sequential',\n        displayName: 'Any display name',\n        children: ['block-children-1', 'block-children-2'],\n      },\n      'block-children-1': {\n        id: 'block-children-1',\n        blockId: 'edx_block-1',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        type: 'sequential',\n        displayName: 'Block children 1',\n      },\n      'block-children-2': {\n        id: 'block-children-2',\n        blockId: 'edx_block-2',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        type: 'sequential',\n        displayName: 'Block children 2',\n      },\n    };\n\n    test('Adds path to block without parent', () => {\n      const testBlock = testBlocks['block-key'];\n      addPathToBlocks(testBlock, testBlocks, 'block-key');\n\n      expect(testBlock.path).toBe('Any display name');\n      expect(testBlock.parentId).toBe(null);\n    });\n\n    test('Adds path to nested block', () => {\n      const rootBlockId = 'block-key';\n      const parentBlock = testBlocks[rootBlockId];\n      const nestedBlock1 = testBlocks['block-children-1'];\n      const nestedBlock2 = testBlocks['block-children-2'];\n\n      addPathToBlocks(nestedBlock1, testBlocks, rootBlockId, parentBlock.id, parentBlock.displayName);\n      addPathToBlocks(nestedBlock2, testBlocks, rootBlockId, parentBlock.id, parentBlock.displayName);\n\n      expect(nestedBlock1.path).toBe('Any display name / Block children 1');\n      expect(nestedBlock1.parentId).toBe(rootBlockId);\n\n      expect(nestedBlock2.path).toBe('Any display name / Block children 2');\n      expect(nestedBlock2.parentId).toBe(rootBlockId);\n    });\n  });\n  describe('formatBlocks', () => {\n    const mockBlocks = {\n      blockRoot: {\n        id: 'blockRoot',\n        blockId: 'edx_block-1',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        type: 'character',\n        displayName: 'Any display name',\n        children: ['block1', 'block2'],\n      },\n      block1: {\n        id: 'block1',\n        blockId: 'edx_block-1',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        displayName: 'Block children 1',\n        type: 'sequential',\n      },\n      block2: {\n        id: 'block2',\n        blockId: 'edx_block-2',\n        lmsWebUrl: 'http://localhost/weburl',\n        legacyWebUrl: 'http://localhost/legacy',\n        studentViewUrl: 'http://localhost/studentview',\n        type: 'sequential',\n        displayName: 'Block children 2',\n      },\n    };\n\n    test('correctly formats blocks with path information', () => {\n      const formattedBlocks = formatBlocks(mockBlocks, 'blockRoot');\n      expect(formattedBlocks.block1.path).toBeDefined();\n      expect(formattedBlocks.block2.path).toBeDefined();\n    });\n\n    test('correctly assigns parentId to blocks', () => {\n      const formattedBlocks = formatBlocks(mockBlocks, 'blockRoot');\n      expect(formattedBlocks.block1.parentId).toBeDefined();\n      expect(formattedBlocks.block2.parentId).toBeDefined();\n    });\n\n    test('returns an empty object when blocks are empty', () => {\n      const formattedBlocks = formatBlocks({}, 'blockRoot');\n      expect(formattedBlocks).toEqual({});\n    });\n\n    test('handles invalid input gracefully', () => {\n      const formattedBlocks = formatBlocks(mockBlocks, 'nonExistingRoot');\n      expect(formattedBlocks.blockRoot.parentId).toBeNull();\n      expect(formattedBlocks.block1.parentId).toBeNull();\n      expect(formattedBlocks.block2.parentId).toBeNull();\n    });\n\n    test('maintains the original structure of blocks', () => {\n      const formattedBlocks = formatBlocks(mockBlocks, 'blockRoot');\n      expect(formattedBlocks.block1.id).toEqual('block1');\n      expect(formattedBlocks.block1.displayName).toEqual('Block children 1');\n    });\n  });\n  describe('isValidURL function', () => {\n    test('returns true for a valid HTTP URL', () => {\n      const validHTTPUrl = 'http://www.example.com';\n      expect(isValidURL(validHTTPUrl)).toBe(true);\n    });\n\n    test('returns true for a valid HTTPS URL', () => {\n      const validHTTPSUrl = 'https://www.example.com';\n      expect(isValidURL(validHTTPSUrl)).toBe(true);\n    });\n\n    test('returns true for a valid FTP URL', () => {\n      const validFTPUrl = 'ftp://ftp.example.com';\n      expect(isValidURL(validFTPUrl)).toBe(true);\n    });\n\n    test('returns false for an invalid URL', () => {\n      const invalidUrl = 'invalid-url';\n      expect(isValidURL(invalidUrl)).toBe(false);\n    });\n\n    test('returns false for an empty URL', () => {\n      const emptyUrl = '';\n      expect(isValidURL(emptyUrl)).toBe(false);\n    });\n\n    test('returns false for a URL with spaces', () => {\n      const urlWithSpaces = 'http://www.example with spaces.com';\n      expect(isValidURL(urlWithSpaces)).toBe(false);\n    });\n  });\n});\n"],"mappings":"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"}