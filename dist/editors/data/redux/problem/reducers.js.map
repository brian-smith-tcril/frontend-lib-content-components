{"version":3,"file":"reducers.js","names":["_lodashEs","_interopRequireDefault","require","_toolkit","_OLXParser","_utils","_problem","_constants","_excluded","_excluded2","_excluded3","obj","__esModule","default","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","ownKeys","e","r","t","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","_toPrimitive","String","Symbol","toPrimitive","TypeError","Number","nextAlphaId","lastId","fromCharCode","charCodeAt","initialState","exports","rawOLX","problemType","question","answers","correctAnswerCount","groupFeedbackList","generalFeedback","additionalAttributes","defaultSettings","settings","randomization","scoring","weight","attempts","unlimited","number","gradingMethod","GradingMethodKeys","LAST_SCORE","hints","timeBetween","showAnswer","on","afterAttempts","showResetButton","solutionExplanation","tolerance","type","ToleranceTypes","none","problem","createSlice","name","reducers","updateField","state","_ref","payload","updateQuestion","_ref2","updateAnswer","_ref3","id","hasSingleAnswer","answer","map","_","has","correct","deleteAnswer","_ref4","editorState","EditorsArray","window","tinymce","editors","ProblemTypeKeys","NUMERIC","title","selectedFeedback","unselectedFeedback","isAnswerRange","index","newId","indexToLetterMap","newAnswer","RichTextProblems","includes","setContent","feedback","newAnswers","letter","addAnswer","currAnswers","newOption","addAnswerRange","updateSettings","_ref5","load","_ref6","setEnableTypeSelection","_ref7","maxAttempts","showanswer","actions","StrictDict","reducer"],"sources":["../../../../../src/editors/data/redux/problem/reducers.js"],"sourcesContent":["import _ from 'lodash-es';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { indexToLetterMap } from '../../../containers/ProblemEditor/data/OLXParser';\nimport { StrictDict } from '../../../utils';\nimport { GradingMethodKeys, ProblemTypeKeys, RichTextProblems } from '../../constants/problem';\nimport { ToleranceTypes } from '../../../containers/ProblemEditor/components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/constants';\n\nconst nextAlphaId = (lastId) => String.fromCharCode(lastId.charCodeAt(0) + 1);\nconst initialState = {\n  rawOLX: '',\n  problemType: null,\n  question: '',\n  answers: [],\n  correctAnswerCount: 0,\n  groupFeedbackList: [],\n  generalFeedback: '',\n  additionalAttributes: {},\n  defaultSettings: {},\n  settings: {\n    randomization: null,\n    scoring: {\n      weight: 1,\n      attempts: {\n        unlimited: false,\n        number: null,\n      },\n      gradingMethod: GradingMethodKeys.LAST_SCORE,\n    },\n    hints: [],\n    timeBetween: 0,\n    showAnswer: {\n      on: '',\n      afterAttempts: 0,\n    },\n    showResetButton: null,\n    solutionExplanation: '',\n    tolerance: {\n      value: null,\n      type: ToleranceTypes.none.type,\n    },\n  },\n};\n\n// eslint-disable-next-line no-unused-vars\nconst problem = createSlice({\n  name: 'problem',\n  initialState,\n  reducers: {\n    updateField: (state, { payload }) => ({\n      ...state,\n      ...payload,\n    }),\n    updateQuestion: (state, { payload }) => ({\n      ...state,\n      question: payload,\n    }),\n    updateAnswer: (state, { payload }) => {\n      const { id, hasSingleAnswer, ...answer } = payload;\n      let { correctAnswerCount } = state;\n      const answers = state.answers.map(obj => {\n        if (obj.id === id) {\n          if (_.has(answer, 'correct') && payload.correct) {\n            correctAnswerCount += 1;\n            return { ...obj, ...answer };\n          }\n          if (_.has(answer, 'correct') && payload.correct === false) {\n            correctAnswerCount -= 1;\n            return { ...obj, ...answer };\n          }\n          return { ...obj, ...answer };\n        }\n        // set other answers as incorrect if problem only has one answer correct\n        // and changes object include correct key change\n        if (hasSingleAnswer && _.has(answer, 'correct') && obj.correct) {\n          return { ...obj, correct: false };\n        }\n        return obj;\n      });\n      return {\n        ...state,\n        correctAnswerCount,\n        answers,\n      };\n    },\n    deleteAnswer: (state, { payload }) => {\n      const { id, correct, editorState } = payload;\n      const EditorsArray = window.tinymce.editors;\n      if (state.answers.length === 1) {\n        return {\n          ...state,\n          correctAnswerCount: state.problemType === ProblemTypeKeys.NUMERIC ? 1 : 0,\n          answers: [{\n            id: 'A',\n            title: '',\n            selectedFeedback: '',\n            unselectedFeedback: '',\n            correct: state.problemType === ProblemTypeKeys.NUMERIC,\n            isAnswerRange: false,\n          }],\n        };\n      }\n      const answers = state.answers.filter(obj => obj.id !== id).map((answer, index) => {\n        const newId = indexToLetterMap[index];\n        if (answer.id === newId) {\n          return answer;\n        }\n        let newAnswer = {\n          ...answer,\n          id: newId,\n          selectedFeedback: editorState.selectedFeedback ? editorState.selectedFeedback[answer.id] : '',\n          unselectedFeedback: editorState.unselectedFeedback ? editorState.unselectedFeedback[answer.id] : '',\n        };\n        if (RichTextProblems.includes(state.problemType)) {\n          newAnswer = {\n            ...newAnswer,\n            title: editorState.answers[answer.id],\n          };\n          if (EditorsArray[`answer-${newId}`]) {\n            EditorsArray[`answer-${newId}`].setContent(newAnswer.title ?? '');\n          }\n        }\n        // Note: The following assumes selectedFeedback and unselectedFeedback is using ExpandedTextArea\n        //   Content only needs to be set here when the 'next' feedback fields are shown.\n        if (EditorsArray[`selectedFeedback-${newId}`]) {\n          EditorsArray[`selectedFeedback-${newId}`].setContent(newAnswer.selectedFeedback ?? '');\n        }\n        if (EditorsArray[`unselectedFeedback-${newId}`]) {\n          EditorsArray[`unselectedFeedback-${newId}`].setContent(newAnswer.unselectedFeedback ?? '');\n        }\n        return newAnswer;\n      });\n      const groupFeedbackList = state.groupFeedbackList.map(feedback => {\n        const newAnswers = feedback.answers.filter(obj => obj !== id).map(letter => {\n          if (letter.charCodeAt(0) > id.charCodeAt(0)) {\n            return String.fromCharCode(letter.charCodeAt(0) - 1);\n          }\n          return letter;\n        });\n        return { ...feedback, answers: newAnswers };\n      });\n      return {\n        ...state,\n        answers,\n        correctAnswerCount: correct ? state.correctAnswerCount - 1 : state.correctAnswerCount,\n        groupFeedbackList,\n      };\n    },\n    addAnswer: (state) => {\n      const currAnswers = state.answers;\n      if (currAnswers.length >= indexToLetterMap.length) {\n        return state;\n      }\n      const newOption = {\n        id: currAnswers.length ? nextAlphaId(currAnswers[currAnswers.length - 1].id) : 'A',\n        title: '',\n        selectedFeedback: '',\n        unselectedFeedback: '',\n        correct: state.problemType === ProblemTypeKeys.NUMERIC,\n        isAnswerRange: false,\n      };\n      let { correctAnswerCount } = state;\n      if (state.problemType === ProblemTypeKeys.NUMERIC) {\n        correctAnswerCount += 1;\n      }\n\n      const answers = [\n        ...currAnswers,\n        newOption,\n      ];\n      return {\n        ...state,\n        correctAnswerCount,\n        answers,\n      };\n    },\n    addAnswerRange: (state) => {\n      // As you may only have one answer range at a time, overwrite the answer object.\n      const newOption = {\n        id: 'A',\n        title: '',\n        selectedFeedback: '',\n        unselectedFeedback: '',\n        correct: state.problemType === ProblemTypeKeys.NUMERIC,\n        isAnswerRange: true,\n      };\n      const correctAnswerCount = 1;\n      return {\n        ...state,\n        correctAnswerCount,\n        answers: [newOption],\n      };\n    },\n\n    updateSettings: (state, { payload }) => ({\n      ...state,\n      settings: {\n        ...state.settings,\n        ...payload,\n      },\n    }),\n    load: (state, { payload: { settings: { scoring, showAnswer, ...settings }, ...payload } }) => ({\n      ...state,\n      settings: {\n        ...state.settings,\n        scoring: { ...state.settings.scoring, ...scoring },\n        showAnswer: { ...state.settings.showAnswer, ...showAnswer },\n        ...settings,\n      },\n      ...payload,\n    }),\n    setEnableTypeSelection: (state, { payload }) => {\n      const { maxAttempts, showanswer, showResetButton } = payload;\n      const attempts = { number: maxAttempts, unlimited: false };\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          scoring: { ...state.settings.scoring, attempts },\n          showAnswer: { ...state.settings.showAnswer, on: showanswer },\n          ...showResetButton,\n        },\n        problemType: null,\n      };\n    },\n  },\n});\n\nconst actions = StrictDict(problem.actions);\n\nconst { reducer } = problem;\n\nexport {\n  actions,\n  initialState,\n  reducer,\n};\n"],"mappings":"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"}